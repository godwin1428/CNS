13. Write a C program for Hill cipher succumbs to a known plaintext attack if sufficient plaintextâ€“ 
ciphertext pairs are provided. It is even easier to solve the Hill cipher if a chosen plaintext attack can be  
mounted.  

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#define N 2

void printMatrix(int key[N][N]) {
    int i, j;
    for(i=0; i<N; i++) {
        for(j=0; j<N; j++) {
            printf("%d ", key[i][j]);
        }
        printf("\n");
    }
}

int modInverse(int a, int m) {
    int x;
    a = a % m;
    for(x=1; x<m; x++) {
        if((a*x) % m == 1) return x;
    }
    return -1;
}

int determinant(int key[N][N]) {
    return key[0][0]*key[1][1] - key[0][1]*key[1][0];
}

void adjugate(int key[N][N], int adj[N][N]) {
    adj[0][0] = key[1][1];
    adj[0][1] = -key[0][1];
    adj[1][0] = -key[1][0];
    adj[1][1] = key[0][0];
}

void inverseMatrix(int key[N][N], int inv[N][N]) {
    int det = determinant(key);
    int detInv = modInverse(det, 26);
    int i, j;
    
    if(detInv == -1) {
        printf("Matrix is not invertible\n");
        exit(1);
    }
    
    int adj[N][N];
    adjugate(key, adj);
    
    for(i=0; i<N; i++) {
        for(j=0; j<N; j++) {
            inv[i][j] = (adj[i][j] * detInv) % 26;
            if(inv[i][j] < 0) inv[i][j] += 26;
        }
    }
}

void multiplyMatrices(int plain[N][N], int key[N][N], int result[N][N]) {
    int i, j, k;
    for(i=0; i<N; i++) {
        for(j=0; j<N; j++) {
            result[i][j] = 0;
            for(k=0; k<N; k++) {
                result[i][j] += plain[i][k] * key[k][j];
            }
            result[i][j] %= 26;
        }
    }
}

void recoverKey(int knownPlain[N][N], int knownCipher[N][N], int recoveredKey[N][N]) {
    int invPlain[N][N];
    inverseMatrix(knownPlain, invPlain);
    
    multiplyMatrices(knownCipher, invPlain, recoveredKey);
    
    int i, j;
    for(i=0; i<N; i++) {
        for(j=0; j<N; j++) {
            recoveredKey[i][j] %= 26;
            if(recoveredKey[i][j] < 0) recoveredKey[i][j] += 26;
        }
    }
}

int main() {
    int knownPlain[N][N] = {{7, 8}, {11, 11}};
    int knownCipher[N][N] = {{3, 19}, {12, 4}};
    int recoveredKey[N][N];
    
    printf("Known Plaintext:\n");
    printMatrix(knownPlain);
    
    printf("\nKnown Ciphertext:\n");
    printMatrix(knownCipher);
    
    recoverKey(knownPlain, knownCipher, recoveredKey);
    
    printf("\nRecovered Key:\n");
    printMatrix(recoveredKey);
    
    return 0;
}
