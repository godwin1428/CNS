27.  Write a C program for Bob uses the RSA cryptosystem with a very large modulus n for which the  
factorization cannot be found in a reasonable amount of time. Suppose Alice sends a message to Bob by  
representing each alphabetic character as an integer between 0 and 25 (A S 0, c, Z S 25) and then  
encrypting each number separately using RSA with large e and large n. Is this method secure? If not,  
describe the most efficient attack against this encryption method.  

#include <stdio.h>
#include <math.h>
#include <stdlib.h>

// Function to compute (base^exp) % mod using modular exponentiation
long long mod_exp(long long base, long long exp, long long mod) {
    long long result = 1;
    while (exp > 0) {
        if (exp % 2 == 1) {
            result = (result * base) % mod;
        }
        base = (base * base) % mod;
        exp /= 2;
    }
    return result;
}

// Function to encrypt a message using RSA encryption
void encrypt_message(char *message, long long e, long long n) {
    printf("Encrypted message: ");
    for (int i = 0; message[i] != '\0'; i++) {
        if (message[i] >= 'A' && message[i] <= 'Z') {
            long long m = message[i] - 'A'; // Convert to integer 0-25
            long long c = mod_exp(m, e, n); // Encrypt character
            printf("%lld ", c);
        }
    }
    printf("\n");
}

int main() {
    char message[] = "HELLO";
    long long e = 65537; // Public exponent
    long long n = 3233;  // Public modulus (example, should be large in real RSA)
    encrypt_message(message, e, n);
    return 0;
}
