28.Write a C program for Diffie-Hellman protocol, each participant selects a secret number x and sends  
the other participant ax mod q for some public number a. What would happen if the participants sent  
each other xa for some public number a instead? Give at least one method Alice and Bob could use to  
agree on a key. Can Eve break your system without finding the secret numbers? Can Eve find the secret  
numbers? 

#include <stdio.h>
#include <math.h>

// Function to compute (base^exp) % mod using fast modular exponentiation
long long power_mod(long long base, long long exp, long long mod) {
    long long result = 1;
    while (exp > 0) {
        if (exp % 2 == 1) result = (result * base) % mod;
        base = (base * base) % mod;
        exp /= 2;
    }
    return result;
}

int main() {
    long long q = 23; // Prime modulus
    long long a = 5;  // Primitive root (generator)

    // Private keys (secret numbers)
    long long xA = 6; // Alice's private key
    long long xB = 15; // Bob's private key

    // Compute public keys
    long long A = power_mod(a, xA, q); // Alice computes (a^xA) % q
    long long B = power_mod(a, xB, q); // Bob computes (a^xB) % q

    // Exchange A and B (publicly transmitted)

    // Compute shared secret
    long long keyAlice = power_mod(B, xA, q); // Alice computes (B^xA) % q
    long long keyBob = power_mod(A, xB, q);   // Bob computes (A^xB) % q

    printf("Public values: a = %lld, q = %lld\n", a, q);
    printf("Alice's private key: %lld\n", xA);
    printf("Bob's private key: %lld\n", xB);
    printf("Alice sends: %lld\n", A);
    printf("Bob sends: %lld\n", B);
    printf("Shared secret key computed by Alice: %lld\n", keyAlice);
    printf("Shared secret key computed by Bob: %lld\n", keyBob);

    return 0;
}
