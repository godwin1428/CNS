40. Write a C program that can perform a letter frequency attack on any monoalphabetic substitution  
cipher without human intervention. Your software should produce possible plaintexts in rough order of  
likelihood. It would be good if your user interface allowed the user to specify “give me the top 10  
possible plaintexts.”

#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX_TEXT_SIZE 1000
#define ALPHABET_SIZE 26

// English letter frequencies (in percentage)
double english_frequencies[ALPHABET_SIZE] = {
    8.167, 1.492, 2.782, 4.253, 12.702, 2.228, 2.015, 6.094,
    6.966, 0.153, 0.772, 4.025, 2.406, 6.749, 7.507, 1.929,
    0.095, 5.987, 6.327, 9.056, 2.758, 0.978, 2.360, 0.150,
    1.974, 0.074
};

// Structure to hold plaintext guesses
typedef struct {
    char plaintext[MAX_TEXT_SIZE];
    double score;
} DecryptionResult;

// Function to compute frequency of letters in ciphertext
void compute_frequencies(char *text, double frequencies[ALPHABET_SIZE]) {
    int count[ALPHABET_SIZE] = {0};
    int total_letters = 0;

    for (int i = 0; text[i] != '\0'; i++) {
        if (isalpha(text[i])) {
            count[tolower(text[i]) - 'a']++;
            total_letters++;
        }
    }

    for (int i = 0; i < ALPHABET_SIZE; i++) {
        frequencies[i] = (total_letters > 0) ? (count[i] * 100.0 / total_letters) : 0;
    }
}

// Function to create a mapping from cipher frequencies to English frequencies
void create_mapping(double cipher_freq[ALPHABET_SIZE], char mapping[ALPHABET_SIZE]) {
    int used[ALPHABET_SIZE] = {0};

    for (int i = 0; i < ALPHABET_SIZE; i++) {
        double min_diff = 100.0;
        int best_match = -1;

        for (int j = 0; j < ALPHABET_SIZE; j++) {
            if (!used[j]) {
                double diff = (cipher_freq[i] > english_frequencies[j]) ? 
                              (cipher_freq[i] - english_frequencies[j]) :
                              (english_frequencies[j] - cipher_freq[i]);

                if (diff < min_diff) {
                    min_diff = diff;
                    best_match = j;
                }
            }
        }

        if (best_match != -1) {
            mapping[i] = 'a' + best_match;
            used[best_match] = 1;
        }
    }
}

// Function to decrypt ciphertext using a given mapping
void decrypt_text(char *ciphertext, char *plaintext, char mapping[ALPHABET_SIZE]) {
    for (int i = 0; ciphertext[i] != '\0'; i++) {
        if (isalpha(ciphertext[i])) {
            char base = isupper(ciphertext[i]) ? 'A' : 'a';
            plaintext[i] = mapping[tolower(ciphertext[i]) - 'a'];
            if (isupper(ciphertext[i])) {
                plaintext[i] = toupper(plaintext[i]);
            }
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[strlen(ciphertext)] = '\0';
}

// Function to score plaintext based on English letter frequency
double score_text(char *plaintext) {
    double score = 0;
    for (int i = 0; plaintext[i] != '\0'; i++) {
        if (isalpha(plaintext[i])) {
            score += english_frequencies[tolower(plaintext[i]) - 'a'];
        }
    }
    return score;
}

// Function to sort decryption results based on score
void sort_results(DecryptionResult results[], int size) {
    for (int i = 0; i < size - 1; i++) {
        for (int j = 0; j < size - i - 1; j++) {
            if (results[j].score < results[j + 1].score) {
                DecryptionResult temp = results[j];
                results[j] = results[j + 1];
                results[j + 1] = temp;
            }
        }
    }
}

int main() {
    // Ciphertext (hardcoded)
    char ciphertext[MAX_TEXT_SIZE] = "Jxu evviuj veh jxu iused qd!";
    
    // Compute frequency of letters in ciphertext
    double cipher_frequencies[ALPHABET_SIZE];
    compute_frequencies(ciphertext, cipher_frequencies);

    // Generate multiple mappings and store results
    DecryptionResult results[ALPHABET_SIZE];
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        char mapping[ALPHABET_SIZE];
        create_mapping(cipher_frequencies, mapping);

        decrypt_text(ciphertext, results[i].plaintext, mapping);
        results[i].score = score_text(results[i].plaintext);
    }

    // Sort results based on frequency analysis score
    sort_results(results, ALPHABET_SIZE);

    // Print top 10 possible plaintexts
    printf("Top 10 Possible Plaintexts:\n");
    for (int i = 0; i < 10; i++) {
        printf("%d. %s (Score: %.2f)\n", i + 1, results[i].plaintext, results[i].score);
    }

    return 0;
}
